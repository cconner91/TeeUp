# Core Data Model

## ‚úÖ Entities to Define

### Players: name, handicap index, course handicap (per tee box)
### Courses: hole data (par, yardage, stroke index/handicap rating)
### Rounds: date, course, players, tees
### Scores: player-hole scores, gross & net
### Games: format, rules, scoring logic



## Key Calculations to Support

### üßÆ Handicap Adjustments
Course Handicap = Handicap Index √ó (Slope Rating / 113)

Adjusted per tee box

For net scoring, calculate Net Score = Gross Score ‚Äì Handicap Strokes

üéØ Stroke Allocation Per Hole
Use the hole‚Äôs stroke index (1‚Äì18):

For an 18 handicap ‚Üí 1 stroke on every hole

For a 24 handicap ‚Üí 1 stroke on every hole + 2 strokes on stroke index 1‚Äì6

For a 9 handicap ‚Üí 1 stroke on stroke index 1‚Äì9 only

Use this to create a hole_stroke_allowance map for each player.

____________________________________

Score calculations are based off of 4 primary factors.

1. "scoringFormat" - This is largely the most important value in score calculation. It not only determines the unit of scoring value (stroke, point or boolean)
        StrokePlay= Incrementing values on each hole with simple sum function
        MatchPlay= A terminary value {Win=1, Draw=0.5, Lose=0}
        PointsBased= An integer value which is determined by the game rules.


2. "gameplayFormat" - While not directly impacting overall scoring, the gameplayFormat.[TYPE] impacts the method in which scores are generated on a hole-by-hole basis because
                      each type of gameplayFormat offers different values which are ultimately accepted as the final score being used per hole. 

3. "matchupFormat" - Again, while this doesn't impact the direct scoring, it impacts how the app stores the scores.

4. Handicap - The optional handicap will influence the scoring when enabled.


interface ScoringCalculator {
  calculateScore(gameData: GameData, players: Player[]): ScoreResult;
}

Where:

GameData contains hole scores, handicaps, etc.
Player represents player or team info.
ScoreResult contains the computed total scores or per-hole results.

______________________________

Scoring Type Calculator Function:




class StrokePlayCalculator implements ScoringCalculator {
  calculateScore(gameData: GameData, players: Player[]): ScoreResult {
    // Sum strokes over all holes for each player/team
    const results = players.map(player => {
      const totalStrokes = gameData.holes.reduce((sum, hole) => sum + (hole.scores[player.id] || 0), 0);
      return { playerId: player.id, score: totalStrokes };
    });
    return { results };
  }
}
class MatchPlayCalculator implements ScoringCalculator {
  calculateScore(gameData: GameData, players: Player[]): ScoreResult {
    // Count holes won/lost/tied based on head-to-head hole performance
    // This is simplified; depends on matchup format etc.
    // ... logic here ...
  }

}
class PointsBasedCalculator implements ScoringCalculator {
  calculateScore(gameData: GameData, players: Player[]): ScoreResult {
    // Sum points over all holes for each player/team
    const results = players.map(player => {
      const totalPoints = gameData.holes.reduce((sum, hole) => sum + (hole.scores[player.id] || 0), 0);
      return { playerId: player.id, score: totalStrokes };
    });
    return { results };
  }


### Design your scoring logic to be modular:

class ScoringEngine {
  calculateGrossScores(scores: ScorecardData): GrossScoreResult;
  calculateNetScores(scores: ScorecardData, handicaps: HandicapMap): NetScoreResult;
  calculateMatchPlayResults(grossOrNetScores, format): MatchPlayResult;
  calculateBestBallResults(teams, holeScores): BestBallResult;
  calculateSkins(holeScores): SkinsResult;
  // Add more formats as needed
}

Each game type should call into the core engine with a specific scoring strategy

This enables plugging in new formats easily


### Example: Stroke Play Scoring (Net):

for each player:
  net_score = 0
  for each hole:
    gross = player_scores[hole]
    strokes = getStrokesForHole(player.handicap, hole.strokeIndex)
    net = gross - strokes
    net_score += net


### Waterfall Scoring:

[Number of Players]
        |
        v
[Select Game Format]
        |
        v
[Determine Matchup Format]
        |
        v
[Apply Handicap Calculation Logic]
        |
        v
[Select Scoring Format]
        |
        v
[Determine Gameplay Format]
        |
        v
[Calculate Final Scores Considering Handicaps]




function adjustScoresForHandicap(rawScores, playerHandicaps, matchupFormat, scoringFormat) {
  if (matchupFormat === 'Solo' && scoringFormat === 'StrokePlay') {
    // Apply stroke reduction per player straightforwardly
  } else if (matchupFormat === 'TeamPlay' && scoringFormat === 'MatchPlay') {
    // Apply team handicap rules, e.g., assigning handicap strokes to holes
  } else {
    // Other custom logic based on formats
  }
  return adjustedScores;
}
// Usage in scoring flow
const adjustedScores = adjustScoresForHandicap(rawScores, playerHandicaps, gameConfig.matchupFormat, gameConfig.scoringFormat);
finalScores = calculateScoresFromAdjusted(adjustedScores, gameConfig);


Hole-by-Hole Scoring Layer

Record and calculate scores for each hole individually.
Apply scoring rules (including handicaps, gameplay format considerations) per hole.
Store intermediate results per hole for UI and further processing.
Total Scoring Layer

Aggregate hole scores to get total or cumulative scores for players or teams.
Use these totals for final rankings, match results, or betting outcomes.
Ensure aggregation respects scoring format (e.g., Match Play might aggregate wins/losses rather than stroke counts).
Random/Conditional Scoring Handling

Implement hooks or conditional logic to apply random or special scoring rules on specified holes or scenarios (e.g., a random ‚Äúpower hole‚Äù where scoring differs).
These conditions can be defined per game or via configuration/options at game setup.


### Example: Match Play Scoring:

for each hole:
  player1_net = player1_score[hole] - getStrokesForHole(player1_handicap, hole.strokeIndex)
  player2_net = player2_score[hole] - getStrokesForHole(player2_handicap, hole.strokeIndex)

  if player1_net < player2_net:
    player1_holes_won += 1
  else if player2_net < player1_net:
    player2_holes_won += 1


### Example: Best Ball (Net or Gross):

for each team:
  for each hole:
    best_net_score = min(
      team_player_scores.map(p => p.gross - getStrokesForHole(p.handicap, hole.strokeIndex))
    )
    team_scorecard[hole] = best_net_score

________________________________

## Enhancements

Support team handicap adjustments (e.g., 90% of handicap for best ball)

Add dot game logic (birdies, pars, greenies, sandies, etc.)

Real-time leaderboards: aggregate score states as each hole is played


_________________________________


## Data Storage & API Suggestions

Store all raw scores per player per hole

Store computed values like net scores, skins, matches in derived tables or cache

Use a rules engine or service layer (e.g., ScoreService.calculateNetMatchResult())
